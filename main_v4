// filename ******** Main.C **************
//***********************************************************************
// Simple ADC example for the Technological ArtsEsduinoXtreme board
// by Carl Barnes, 12/03/2014
//***********************************************************************
#include <hidef.h> /* common defines and macros */
#include "derivative.h" /* derivative information */
#include "SCI.h"
char string[20];
unsigned int val;
unsigned int sign;//0 for negative, 1 for positive
unsigned int mode;
unsigned int theta;
unsigned int thetaDenominator;
void decToBCD(unsigned int);
unsigned int thetaCalc(unsigned int, unsigned int);
void msDelay(unsigned int);
//---------------------OutCRLF---------------------
// Output a CR,LF to SCI to move cursor to a new line
// Input: none
// Output: none
// Toggle LED each time through the loop
void OutCRLF(void){
 SCI_OutChar(CR);
 SCI_OutChar(LF);
 PTJ ^= 0x20; // toggle LED D2
}
void main(void) {
/* SET YOUR YOUR GLOBAL VARIABLES BELOW*/
 /////////////////////////////////////////////////////

 /* SET YOUR YOUR GLOBAL VARIABLES ABOVE*/
 /////////////////////////////////////////////////////
/* DECLARE ALL YOUR LOCAL VARIABLES BELOW*/
 /////////////////////////////////////////////////////

 /* DECLARE ALL YOUR LOCAL VARIABLES ABOVE*/
 /////////////////////////////////////////////////////

 /* ESDUINO PORT CONFIGURATION BELOW (Don't Edit) */
 /////////////////////////////////////////////////////
 //Set Ports
 DDRJ = 0xFF; //set all port J as output
/*
* The next six assignment statements configure the Timer Input Capture
*/
 TSCR1 = 0x90; //Timer System Control Register 1
 // TSCR1[7] = TEN: Timer Enable (0-disable, 1-enable)
 // TSCR1[6] = TSWAI: Timer runs during WAI (0-enable, 1-disable)
 // TSCR1[5] = TSFRZ: Timer runs during WAI (0-enable, 1-disable)
 // TSCR1[4] = TFFCA: Timer Fast Flag Clear All (0-normal1-read/write clears interrupt flags)
 // TSCR1[3] = PRT: Precision Timer (0-legacy, 1-precision)
 // TSCR1[2:0] not used
 TSCR2 = 0x04; //Timer System Control Register 2
 // TSCR2[7] = TOI: Timer Overflow Interrupt Enable (0-inhibited, 1-hardware irq when TOF=1)
 // TSCR2[6:3] not used
// TSCR2[2:0] = Timer Prescaler Select: See Table22-12 ofMC9S12G Family Reference Manual r1.25 (set for bus/1)


 TIOS = 0xFC; //Timer Input Capture or Output capture
 //set TIC[0] and input (similar to DDR)
 PERT = 0x03; //Enable Pull-Up resistor on TIC[0] and TIC[1]
 TCTL3 = 0x00; //TCTL3 & TCTL4 configure which edge(s) to capture
 TCTL4 = 0x0A; //Configured for falling edge on TIC[0] (channel 0) andTIC[1] (channel 1)
/*
* The next one assignment statement configures the Timer Interrupt Enable
*/

 TIE = 0x03; //Timer Interrupt Enable
/*
* The next one assignment statement configures the ESDX to catch Interrupt
Requests
*/

 EnableInterrupts; //CodeWarrior's method of enabling interrupts
// Setup and enable ADC channel 0
// Refer to Chapter 14 in S12G Reference Manual for ADCsubsystem details

 ATDCTL1 = 0x4F; // set for 12-bit resolution
 ATDCTL3 = 0x88; // right justified, one sample persequence
 ATDCTL4 = 0x02; // prescaler = 2; ATD clock =6.25MHz / (2 * (2 + 1)) == 1.04MHz
 ATDCTL5 = 0x20; // continuous conversion on channel0

// Configure Timer for PWM on channel 0 (uncomment belowfor milestone 2)
// PWMCTL= 0x??
// PWMCLK= 0x??
// PWMCLKAB= 0x??
// PWMPRCLK= 0x??
// PWME= 0x??
// Configure PWM preoperties (uncomment below for milestone2)
// PWMPOL= 0x??
// PWMPER0= ?
// PWMCAE= 0x??
// PWMDTY0= ?
// Setup LED and SCI
 DDRJ |= 0x01; // PortJ bit 0 is output to LED D2 onDIG13
 SCI_Init(9600);
 sign=0;
 thetaDenominator=31;
 mode=0;

 for(;;) {
   PTJ ^= 0x01; // toggle LED

   SCI_OutUDec(mode);

   if (mode==0){
     ATDCTL5 = 0x24; // continuous conversion on channel4
     SCI_OutString("x:");
   } 
   else if (mode==1) {
     ATDCTL5 = 0x25; // continuous conversion on channel5
     SCI_OutString(",y:"); 
   }
   val=ATDDR0;
   if (mode==1) {
     val=val+40;
   }
   if (val>=1330) {
       val=val-1330;
       sign=1;
   } 
   else {
       val=1330-val;
       sign=0;           
   }
   SCI_OutUDec(val);
   SCI_OutString("   Sign:");
   SCI_OutUDec(sign);
   SCI_OutString("   Mode:");
   SCI_OutUDec(mode);
   theta=thetaCalc(thetaDenominator,val);
   SCI_OutString("   Theta:");
   SCI_OutUDec(theta);
   decToBCD(theta);
   OutCRLF();

   //SCI_OutString("Ben Stephens 400135219");
   //OutCRLF();

   msDelay(500); // 1 sec delay, you can validate usingmethod outlined in Lecture W8-2_W8-3
  }
}
interrupt VectorNumber_Vtimch0 void ISR_Vtimch0(void)
{
  unsigned int temp; //DON'T EDIT THIS
  SCI_OutString("Interrupt!");
  if (mode==0){
    mode=1;
  }else{
    mode=0;
  }
  PTJ ^= 0x01;
  temp = TC0;  
}
unsigned int thetaCalc(unsigned int thetaDenominator, unsigned int parameter) {
  unsigned int asin;                                                 
  unsigned int thetaNumerator;
  unsigned int theta;
  
  asin=(parameter+(parameter*parameter*parameter/10000)/6);//Taylor approx. for arcsin
  
  thetaNumerator=asin*180;
  /*SCI_OutString("   Theta Numerator:");
  SCI_OutUDec(thetaNumerator);
  SCI_OutString("   Theta Denominator:");
  SCI_OutUDec(thetaDenominator);
  SCI_OutString("!");*/
  
  theta=thetaNumerator/thetaDenominator;
  
  theta=(theta*9);
  
  theta=theta/160;
  return theta;  
}
void decToBCD(unsigned int decimalNum){
  unsigned int dig1;
  unsigned int dig2;
  
  dig1=decimalNum/10;
  dig2=decimalNum%10;
  
  SCI_OutString("   DIG1:");
  SCI_OutUDec(dig1);
  SCI_OutString("   DIG2:");
  SCI_OutUDec(dig2);
  //PT1AD=0x01; 
}
void msDelay(unsigned int time)
{
 unsigned int j,k;
 for(j=0;j<time;j++)
 for(k=0;k<1033;k++);
}
